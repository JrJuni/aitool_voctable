version: '3.8'

services:
  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: voc_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: voc_database
      MYSQL_USER: voc_user
      MYSQL_PASSWORD: voc_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - voc_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # 데이터베이스 마이그레이션 (init container)
  migration:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: voc_migration
    environment:
      - DATABASE_URL=mysql+pymysql://voc_user:voc_password@mysql:3306/voc_database
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - TOKEN_EXPIRE_MIN=30
      - LOG_LEVEL=INFO
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - voc_network
    command: ["alembic", "upgrade", "head"]
    restart: "no"

  # FastAPI 백엔드
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: voc_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://voc_user:voc_password@mysql:3306/voc_database
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - TOKEN_EXPIRE_MIN=30
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      mysql:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - voc_network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit 프론트엔드
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: voc_frontend
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://backend:8000
    ports:
      - "8501:8501"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - voc_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 리버스 프록시 (선택사항)
  nginx:
    image: nginx:alpine
    container_name: voc_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - voc_network

volumes:
  mysql_data:
    driver: local

networks:
  voc_network:
    driver: bridge
